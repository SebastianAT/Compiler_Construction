/* Copyright (c) 2006, Sun Microsystems, Inc.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Sun Microsystems, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

PARSER_BEGIN(Yapl)
package yapl.compiler;

import yapl.ant.*;
import yapl.compiler.*;
import yapl.exception.*;
import yapl.impl.CodeGenImpl;
import yapl.impl.YAPLAttrib;
import yapl.impl.YAPLSymbol;
import yapl.impl.YAPLSymbolTable;
import yapl.interfaces.*;
import yapl.lib.*;
import java.io.StringReader;
import java.util.ArrayList;import java.util.List;

/** Simple brace matcher. */
public class  Yapl{

    private static Symboltable symboltable = new YAPLSymbolTable();
    private static CodeGen codegen = new CodeGenImpl();
    public static final String PREDEFINED_PROCEDURES =
                         			"Procedure void writeint(int i);" +
                         			"Procedure void writebool(bool b);" +
                         			"Procedure void writeln();" +
                         			"Procedure int readint();";
  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
      Yapl parser = null;

      try {
          parser.ReInit(new StringReader(PREDEFINED_PROCEDURES));
          parser.PredefinedProcedures();
          if(args.length == 0){
                System.out.println ("Reading input ...");
                parser.ReInit(System.in);
          }
          else if(args.length == 1){
                System.out.println ("Reading the file " + args[0] + " ..." );
                try {
                  parser.ReInit(new java.io.FileInputStream(args[0]));
                }
                catch(java.io.FileNotFoundException e) {
                  System.out.println ("The file " + args[0] + " was not found.");
                  return;
                }
          }
          else {
                System.out.println ("You must use one of the following:");
                System.out.println ("         java <parsername>");
                System.out.println ("Or");
                System.out.println ("         java <parsername> file");
                return ;
          }

          parser.Start();
          CompilerMessage.printOK("Yapl");
      }
      catch(ParseException e){
            CompilerMessage.printError(e,"Yapl");
      }
      catch(TokenMgrError e){
            CompilerMessage.printError(e,"Yapl");
      }
      catch(YAPLException e){
          CompilerMessage.printError(e, "Yapl");
      }

  }

}


PARSER_END(Yapl)

// IGNORE WHITE SPACES
SKIP:
{
    " " | "\n" | "\r" | "\t"
}

// Reuseable Default Token
TOKEN : {
<# LETTER: (["a"-"z", "A"-"Z", "_"])> |
<# DIGIT: (["0"-"9"])> |
<# OTHERCHAR: ("+" | "-" | "*" | "/" | "." | "," | ";" | ":" | "!" | "?" | "=" | "#" | "%" | "<" | ">" | "$" | "(" | ")" | "[" | "]" | "{" | "}" | "\\" | "@" | "&" | "^" | "|")>
}

// Keywords
TOKEN : {
    < TRUE : "True" > |
    < FALSE : "False" > |
    < AND: "And" > |
    < NEW: "new" > |
    < OR: "Or" > |
    < IF : "If" > |
    < THEN : "Then" > |
    < ELSE : "Else" > |
    < ENDIF : "EndIf" > |
    < WHILE : "While" > |
    < DO : "Do" > |
    < ENDWHILE : "EndWhile" > |
    < RETURN : "Return" > |
    < WRITE : "Write" > |
    < BEGIN : "Begin" > |
    < END: "End" > |
    < INTEGER :  "int" > |
    < BOOLEAN : "bool" > |
    < VOID : "void" > |
    < CONST : "Const" > |
    < RECORD : "Record" > |
    < ENDRECORD : "EndRecord" > |
    < DECLARE : "Declare" > |
    < PROCEDURE : "Procedure" > |
    < PROGRAM : "Program" > |
    < IDENT : < LETTER > (< LETTER > | < DIGIT >)* > |
    < NUMBER: (< DIGIT >)+ > |
    < STRING: "\"" ( " " | < LETTER > | < DIGIT > | < OTHERCHAR > )* "\"" > |
	< GREATER_EQUAL: ">=" > |
	< LESS_EQUAL: "<=" > |
	< LESS: "<" > |
	< GREATER: ">" > |
	< EQUAL: "==" > |
	< UNEQUAL: "!=" > |
	< ASSIGN: ":=" > 
}

// Special Token for Comments
SPECIAL_TOKEN : {
    < COMMENT : ("/*" (~["*"] | "*" ~["/"])* "*/") >
}

// OPERATIONS
Token RelOP() throws YAPLException : {Token t;}{
    (t = <LESS> | t = <LESS_EQUAL> | t = <GREATER_EQUAL> | t = <GREATER>)
    {
        return t;
    }
}
Token EqualOP() throws YAPLException : {Token t;}{
    (t = <EQUAL> | t = <UNEQUAL>)
    {
        return t;
    }
}
Token AddOP() throws YAPLException : {Token t;}{
    (t = "+" | t = "-")
    {
        return t;
    }
}
Token MulOP() throws YAPLException : {Token t;}{
    (t = "*" | t = "/" | t = "%")
    {
        return t;
    }
}


// EXPRESSIONS
Attrib Literal() throws YAPLException : {Token t; Attrib a;}{
    t = <TRUE>
    {
        a = new YAPLAttrib(new BoolType());
        return a;
    }
    | t = <FALSE>
    {
        a = new YAPLAttrib(new BoolType());
        return a;
    }
    | <NUMBER>
    {
        a = new YAPLAttrib(new IntType());
        return a;
    }
}
Attrib Selector(Attrib a) throws YAPLException : {Token t; Token error1; Token error2; Attrib index;Attrib retval;}{
    ( error1 = "[" index = Expr() error2 = "]" [a = Selector(a)])
    {
    if (!(index.getType() instanceof IntType))
    			throw new BadArraySelectorException(error2);
    if (a.getType() instanceof ArrayType)
    {
        Attrib retVal = new YAPLAttrib(((ArrayType)a.getType()).getSubarray());
        retVal.setOffset(a.getOffset());
        retVal.setKind(Attrib.ArrayElement);
        retVal.setGlobal(a.isGlobal());
        return retVal;
    }
    throw new SelectorNotArrayException(error1);
    }
    | error1 = "." t = <IDENT> [a = Selector(a)]
    {
        if(a.getType() instanceof RecordType){
                return new YAPLAttrib(((RecordType)a.getType()).returnType(t.image));
        }
        throw new SelectorNotRecordException(error1);
        System.out.println(a.getType() + " ");
    }
}
Attrib ArrayLen() throws YAPLException : {Token t; Attrib retval; Token error;}{
    error = "#" t = <IDENT>
    {
    Symbol s = symboltable.lookup(t.image);
    if(s.getKind() != Symbol.Variable && s.getKind() != Symbol.Parameter){
        throw new SymbolIllegalUseException(s);
    }
    retval = new YAPLAttrib(s.getType());
    }
    [retval = Selector(retval) ]
    {
        if (!(retval.getType() instanceof ArrayType))
        {
            throw new ArrayLenNotArrayException(error);
        }
        return codegen.arrayLength(retval);
    }
}
Attrib PrimaryExpr() throws YAPLException : {Token t; Attrib retval = null;}{
    (retval = Literal()
    {
        return retval;
    }
    | "(" retval = Expr() ")" | LOOKAHEAD(2) retval = ProcedureCall(true) | t = <IDENT>
    {
        Symbol s = symboltable.lookup(t.image);
        if(s.getKind() != Symbol.Variable && s.getKind() != Symbol.Constant && s.getKind() != Symbol.Parameter){
            throw new SymbolIllegalUseException(s);
        }
        retval = new YAPLAttrib(s.getType());
    }
    [retval = Selector(retval)] | retval = ArrayLen() )
    {
       return retval;
    }
}
Attrib UnaryExpr() throws YAPLException : {Token t = null; Attrib op;}{
    [t = AddOP() ] op = PrimaryExpr()
    {
        return codegen.op1(t, op);
    }
}
Attrib MulExpr() throws YAPLException :{Token t; Attrib retval; Attrib op;}{
    retval = UnaryExpr()  (t=MulOP()  op = UnaryExpr()
    {
        retval = codegen.op2(retval, t, op);
    } )*
    {
        return retval;
    }
}
Attrib AddExpr() throws YAPLException : {Token t; Attrib retval; Attrib op;}{
    retval = MulExpr() (t = AddOP() op = MulExpr()
    {
        retval = codegen.op2(retval, t, op);
    } )*
    {
        return retval;
    }
}
Attrib RelExpr() throws YAPLException : {Token t; Attrib retval; Attrib op;}{
    retval = AddExpr() [t = RelOP() op = AddExpr()
    {
        retval = codegen.relOp(retval,t,op);
    }
    ]
    {
        return retval;
    }
}
Attrib EqualExpr() throws YAPLException : {Token t; Attrib retval; Attrib op;}{
    retval = RelExpr() [t = EqualOP() op = RelExpr()
    {
        retval = codegen.equalOp(retval, t, op);
    }
    ]
    {
        return retval;
    }
}
Attrib CondAndExpr() throws YAPLException : {Attrib retval; Token op; Attrib exp;}{
    retval = EqualExpr() (op = <AND> exp = EqualExpr()
    {
        retval = codegen.op2(retval,op,exp);
    })*
    {
        return retval;
    }
}
Attrib CreationExpr() throws YAPLException : {Attrib retval; Attrib index; Type type; Token error;}{
    <NEW> type = NonArrayType() ("[" index = Expr() error = "]"
    {
        type = new ArrayType(type);
        if (!(index.getType() instanceof IntType))
        			throw new BadArraySelectorException(error);
    })*
    {
        return codegen.allocArray((ArrayType)type);
    }
}
Attrib Expr() throws YAPLException : {Attrib retval; Token op; Attrib op2;}{
    (retval = CondAndExpr() (op = <OR> op2 = CondAndExpr()
    {
        retval = codegen.op2(retval, op, op2);
    }
    )* | retval = CreationExpr())
    {
        return retval;
    }
}

//Statements
List<Attrib> ArgumentList(Symbol s) throws YAPLException : {Token t; Attrib arg; List<Attrib> retval = new ArrayList<Attrib>(); List<Symbol> param = s.getParam(); int args = 1;}{
    arg = Expr()
    {
        retval.add(arg);
        if ((param.size() < args) || (!param.get(args-1).getType().isCompatible(arg.getType())))
            	throw new ArgNotApplicableException(args, s, token);
    }
    ("," arg = Expr()
    {
        retval.add(arg);
        args++;
        if ((param.size() < args) || (!param.get(args-1).getType().isCompatible(arg.getType())))
                    	throw new ArgNotApplicableException(args, s, token);
    }
    )*
    {
        return retval;
    }
}
Attrib ProcedureCall(boolean isFunc) throws YAPLException : {Token t; Token err; List<Attrib> arguments = new ArrayList<Attrib>();}{
    t = <IDENT>
    {
        Symbol s = symboltable.lookup(t.image);
        if(s.getKind() != Symbol.Procedure){
            throw new SymbolIllegalUseException(s);
        }
        if(isFunc && s.getType() == null)
            throw new ProcNotFuncExprException(s);
    }
    "(" [arguments = ArgumentList(s) ] err = ")"
    {
        if(s.getParam().size() != arguments.size())
            throw new TooFewArgsException(err, s);
        Attrib[] arr = new Attrib[arguments.size()];
        arr = arguments.toArray(arr);
        return codegen.callProc(s,arr);
    }
}

void Assignment() throws YAPLException : {Token t; Attrib target; Attrib source;}{
    t = <IDENT>
    {
    Symbol s = symboltable.lookup(t.image);
    target = new YAPLAttrib(s.getType());
    if(s.getKind() != Symbol.Variable && s.getKind() != Symbol.Parameter){
        throw new SymbolIllegalUseException(s);
    }
}
    [target = Selector(target) ] <ASSIGN> source = Expr()
    {
        codegen.assign(target, source);
    }
}


void IfStatement() throws YAPLException : {Token t; Attrib clause;}{
    <IF> clause = Expr()
    {
        if (!(clause.getType() instanceof BoolType))
              	throw new CondNotBoolException(token);
    }
    <THEN> StatementList() [<ELSE> StatementList()] <ENDIF>
}
void WhileStatement() throws YAPLException : {Token t; Attrib clause;}{
    <WHILE> clause = Expr()
    {
        if (!(clause.getType() instanceof BoolType))
            throw new CondNotBoolException(token);
    }
    <DO> StatementList() <ENDWHILE>
}
void ReturnStatement() throws YAPLException : {Attrib arg = null; Symbol s = symboltable.getNearestParentSymbol(Symbol.Procedure); boolean ret = false;}{
    <RETURN> [arg = Expr()
    {
        ret = true;
        if(s == null)
            throw new IllegalRetValMainException(token);
        if(s.getType() == null)
            throw new IllegalRetValProcException(token, s);
        if (!s.getType().isCompatible(arg.getType()))
            	throw new InvalidReturnTypeException(s, token);
    } ]
    {
        if (s == null) return;
        if (s.getType() != null && !ret)
            	throw new InvalidReturnTypeException(s, token);
        s.setReturnSeen(true);
    }
}
void WriteStatement() throws YAPLException : {Token t;}{
    <WRITE> <STRING>
}
void Statement() throws YAPLException : {Token t;}{
    IfStatement() | WhileStatement() | ReturnStatement() | WriteStatement() | LOOKAHEAD(2) Assignment() | ProcedureCall(false) | Block()
}
void StatementList() throws YAPLException : {Token t;}{
    (Statement() ";")*
}
void Block() throws YAPLException : {Token err;}{
    {
        symboltable.openScope(false);
    }
    [Decl()] <BEGIN> StatementList() err = <END>
    {
         Symbol parent = symboltable.getNearestParentSymbol(Symbol.Procedure);
         if (parent != null && parent.getType() != null && !parent.getReturnSeen())
            throw new MissingReturnException(err, parent);
        symboltable.closeScope();
    }
}

//TYPES
Type NonArrayType() throws YAPLException : {Token t; Type type;}{
    (<INTEGER>
    {
        type = new IntType();
    }
    | <BOOLEAN>
    {
        type = new BoolType();
    }
    | t = <IDENT>
    {
        Symbol s = symboltable.lookup(t.image);
        if(s.getKind() != Symbol.Typename){
            //throw new NonArrayTypeException(s.getKind(), Symbol.Typename);
            throw new SymbolIllegalUseException(s);
        }
        type = s.getType();
    }
    )
    {
        return type;
    }

}
Type Type() throws YAPLException :{Token t; Type type;}{
    type = NonArrayType() ("[" "]"
    {
        type = new ArrayType(type);
    }
    )*
    {
        return type;
    }
}
Type ReturnType() throws YAPLException : {Token t; Type type = null;}{
    (<VOID> | type = Type())
    {
        return type;
    }
}

//DECLARATIONS
void ConstDecl() throws YAPLException : {Token t; Attrib a;}{
    <CONST> t = <IDENT>
    {
        Symbol s = new YAPLSymbol(t.image, Symbol.Constant);
        s.setGlobal(true);
        symboltable.addSymbol(s);
    }
    "=" a = Literal()
    {
        s.setType(a.getType());
    }
    ";"
}
void VarDecl() throws YAPLException : {Type type; Token t; Token t2; Symbol s; Symbol parent = symboltable.getNearestParentSymbol(Symbol.Typename);}{
    type = Type() t = <IDENT>
    {
        s = new YAPLSymbol(t.image, Symbol.Variable);
        s.setType(type);
        symboltable.addSymbol(s);
        if(parent != null){
            ((RecordType)parent.getType()).addField(type,t.image);
        }
    }
    ("," t2 = <IDENT>
    {
        s = new YAPLSymbol(t2.image, Symbol.Variable);
        s.setType(type);
        symboltable.addSymbol(s);
        if(parent != null){
            ((RecordType)parent.getType()).addField(type,t2.image);
        }
    }
    )* ";"
}
void TypeDecl() throws YAPLException : {Token t;}{
    <RECORD> t = <IDENT>
    {
        Symbol s = new YAPLSymbol(t.image, Symbol.Typename);
        symboltable.addSymbol(s);
        symboltable.openScope(false);
        symboltable.setParentSymbol(s);
        s.setType(new RecordType(t.image));
    }
    VarDecl() (VarDecl() )* <ENDRECORD> ";"
    {
        symboltable.closeScope();
    }
}
void Decl() throws YAPLException : {Token t;}{
    <DECLARE> (ConstDecl() |VarDecl() | TypeDecl() )*
}

//PARAMETERS
Symbol FormalParam() throws YAPLException : {Token t; Type type;}{
    type = Type() t = <IDENT>
    {
        Symbol s = new YAPLSymbol(t.image, Symbol.Parameter);
        s.setType(type);
        symboltable.addSymbol(s);
        return s;
    }
}
List<Symbol> FormalParamList() throws YAPLException : {Token t; List<Symbol> param = new ArrayList<Symbol>(); Symbol s;}{
    s = FormalParam()
    {
        param.add(s);
    } ("," s = FormalParam()
    {
        param.add(s);
    } )*
    {
        return param;
    }
}

void Procedure() throws YAPLException : {Token t; Token x; Type type; List<Symbol> param = null;}{
    <PROCEDURE> type = ReturnType() t = <IDENT>
    {
        Symbol s = new YAPLSymbol(t.image, Symbol.Procedure);
        symboltable.addSymbol(s);
        symboltable.openScope(false);
        symboltable.setParentSymbol(s);
        s.setType(type);
    }
    "(" [param = FormalParamList()]  ")"
    {
        if(param != null){s.setParam(param);}
    }
    Block() t = <IDENT>
    {
        Symbol parent = symboltable.getNearestParentSymbol(Symbol.Procedure);
        if(!parent.getName().equals(t.image)){
            throw new EndIdentifierMismatchException(parent, t.image);
        }
        symboltable.closeScope();
    }
    ";"
}
void Program() throws YAPLException : {Token t; Token x;}{
    <PROGRAM> t = <IDENT>
    {
        Symbol s = new YAPLSymbol(t.image, Symbol.Program);
        s.setGlobal(true);
        symboltable.openScope(true);
        symboltable.setParentSymbol(s);
    }
    (Decl() | Procedure() )* <BEGIN> StatementList() <END>  x = <IDENT>
     {
        if(!t.image.equals(x.image)){
            throw new EndIdentifierMismatchException(s, x.image);
        symboltable.closeScope();
     }
}
     "."
}

void PredefinedProcedures() throws YAPLException :
    {}
    {
        (PredefProc())*
    }
void PredefProc() throws YAPLException :
    {
        Token t;
        Type type;
        List<Symbol> param = null;
    }
    {
    < PROCEDURE > type = ReturnType() t = < IDENT >
    {
        Symbol s = new YAPLSymbol(t.image, Symbol.Procedure);
        symboltable.addSymbol(s);
        symboltable.openScope(true);
        symboltable.setParentSymbol(s);
        s.setType(type);
    } "(" (param = FormalParamList())? ")" ";"
    {
        if(param != null){s.setParam(param);}
        symboltable.closeScope();
    }
}

/** Root production. */
void Start() throws YAPLException : { Token t; } {
    (Program())*
      <EOF>
}